


        
       fun main() {    
    initDB()
    println("Hello World")
    // Test functions here
}
data class PaymentInfo(
    val cardOwner : String,
    val cardNumber: Int,
    val cardCVV: Int
)

    
// Hint: accessing a property of a data class is as simple as using examplePaymentInfo.cardNumber to retrieve the Int value

val storedCard1  = PaymentInfo("Bob", 22223333, 111)
val storedCard2 = PaymentInfo("John", 11113333, 134)

val invalidCard1 = PaymentInfo("Tom", 11113333, 134)
val invalidCard2 = PaymentInfo("James", 11113333, 1222)

val cardNumber1= PaymentInfo("Bob", 22223333, 111)
val cardNumber2=PaymentInfo("John", 11113333, 134)
// This database is treated as a global variable that we can access directly in addCardToDatabase
val cardDataBase = mutableMapOf<Int, PaymentInfo>()

// Don't change this function
fun initDB() {
    cardDataBase[storedCard1.cardNumber1] = storedCard1
    cardDataBase[storedCard2.cardNumber2] = storedCard2
}

fun validInfo(paymentInfo: PaymentInfo): Boolean {
    // TODO validate paymentInfo according to instructions
   
  if (paymentInfo== cardNumber1) {
      println("true")
  } 
  if (paymentInfo== cardNumber2) {
     println("true")
  }
   else {
      
  }
    return false
}

fun addCardToDatabase(paymentInfo: PaymentInfo): Boolean {
    
    // TODO check if we can add card to database according to instructions 
    // use println("ERROR) and return false if the card has already been added 
    // use println("SUCCESS"), add the card to the database, and return true if the card can be added
    val card = mutableMapOf(22223333 to "paymentInfo",11113333 to "paymentInfo")
    
    if (card==.getValue(0).card()) {
        println("ERROR"+card.getValue(0))
    }
    return false
    else if (card!==.getValue(0).card()) {
         println("SUCCESS"+card.getValue(0))
    }
}





